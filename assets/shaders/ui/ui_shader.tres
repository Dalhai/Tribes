[gd_resource type="VisualShader" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=4]
uniform_name = "screen_size"

[sub_resource type="VisualShaderNodeTexture" id=5]
source = 2
texture_type = 1

[sub_resource type="VisualShaderNodeVec3Uniform" id=7]
uniform_name = "uv_scale"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=9]
function = 19

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeVectorInterp" id=12]

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "color"

[sub_resource type="VisualShaderNodeScalarUniform" id=14]
uniform_name = "screen_scale"

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "opacity"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "screen_uv"

[resource]
code = "shader_type canvas_item;
render_mode blend_disabled, unshaded;

uniform vec3 uv_scale;
uniform float screen_scale;
uniform vec3 screen_size;
uniform float opacity;



void vertex() {
// Output:0

}

void fragment() {
// Input:27
	vec3 n_out27p0 = COLOR.rgb;

// Input:5
	vec3 n_out5p0 = vec3(SCREEN_UV, 0.0);

// VectorUniform:15
	vec3 n_out15p0 = uv_scale;

// VectorOp:10
	vec3 n_out10p0 = n_out5p0 * n_out15p0;

// ScalarUniform:28
	float n_out28p0 = screen_scale;

// VectorUniform:11
	vec3 n_out11p0 = screen_size;

// VectorOp:23
	vec3 n_out23p0 = vec3(n_out28p0) * n_out11p0;

// VectorOp:16
	vec3 n_out16p0 = n_out10p0 * n_out23p0;

// VectorFunc:21
	vec3 n_out21p0 = floor(n_out16p0);

// VectorOp:22
	vec3 n_out22p0 = n_out16p0 - n_out21p0;

// Texture:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out22p0.xy);
		n_out13p0 = _tex_read.rgb;
		n_out13p1 = _tex_read.a;
	}

// ScalarUniform:29
	float n_out29p0 = opacity;

// VectorMix:26
	vec3 n_out26p0 = mix(n_out27p0, n_out13p0, vec3(n_out29p0));

// Output:0
	COLOR.rgb = n_out26p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 21, -148 )
mode = 1
modes/blend = 5
flags/light_only = false
flags/unshaded = true
nodes/vertex/0/position = Vector2( 400, 80 )
nodes/fragment/0/position = Vector2( 980, 20 )
nodes/fragment/5/node = SubResource( 2 )
nodes/fragment/5/position = Vector2( -540, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -320, 180 )
nodes/fragment/11/node = SubResource( 4 )
nodes/fragment/11/position = Vector2( -520, 360 )
nodes/fragment/13/node = SubResource( 5 )
nodes/fragment/13/position = Vector2( 500, 60 )
nodes/fragment/15/node = SubResource( 7 )
nodes/fragment/15/position = Vector2( -520, 220 )
nodes/fragment/16/node = SubResource( 8 )
nodes/fragment/16/position = Vector2( -140, 180 )
nodes/fragment/21/node = SubResource( 9 )
nodes/fragment/21/position = Vector2( 80, 220 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( 300, 60 )
nodes/fragment/23/node = SubResource( 11 )
nodes/fragment/23/position = Vector2( -320, 300 )
nodes/fragment/26/node = SubResource( 12 )
nodes/fragment/26/position = Vector2( 720, 20 )
nodes/fragment/27/node = SubResource( 13 )
nodes/fragment/27/position = Vector2( 500, -20 )
nodes/fragment/28/node = SubResource( 14 )
nodes/fragment/28/position = Vector2( -520, 300 )
nodes/fragment/29/node = SubResource( 15 )
nodes/fragment/29/position = Vector2( 480, 200 )
nodes/fragment/connections = PoolIntArray( 5, 0, 10, 0, 15, 0, 10, 1, 10, 0, 16, 0, 16, 0, 21, 0, 16, 0, 22, 0, 21, 0, 22, 1, 22, 0, 13, 0, 11, 0, 23, 1, 23, 0, 16, 1, 27, 0, 26, 0, 13, 0, 26, 1, 28, 0, 23, 0, 29, 0, 26, 2, 26, 0, 0, 0 )
